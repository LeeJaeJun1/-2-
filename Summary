/*range-based-for

#include <iostream>
#include<array>
using namespace  std;

int main() {
    array<int, 5> items{1,2,3,4,5};

    cout << "items before modification: ";
    for(int item: items) {
        cout << item << " ";
    }

    // &참조자 : 대상에게 또 다른 이름 붙여주는 것
    // 하나의 메모리 공간에 이름이 2개 생기게 되고 이 둘의 주소 값 같다.
    for(int& itemRef : items) {
        itemRef *= 2;
    }

    cout << "\nitems after modification: ";
    for(int item : items) {
        cout << item << " ";
    }
    cout << endl;
}
*/

/* recursive function
#include<iostream>
#include<iomanip>
using namespace  std;

unsigned long factorial(unsigned long number) {
    if(number <= 1 ) {
        return 1;
    }
    else{
        return number * factorial(number-1);
    }
}

int main() {
    for(unsigned int counter{0}; counter<=10; ++counter) {
        cout << setw(2) << counter << " ! = " << factorial(counter)
        << endl;
    }
}
*/

/* array
#include<iostream>
#include<iomanip>
#include<array>
using namespace std;

int main() {
    array<int, 5> n; //

    for(size_t i{0}; i< n.size(); i++) {
        n[i] = 0;
    }

    cout << "Element" << setw(10) << "Value" << endl;

    for(size_t j{0}; j < n.size(); j++) {
        cout << setw(7) << j << setw(10) << n[j] << endl;
    }
}
*/

/* array
#include<iostream>
#include<array>
using namespace std;

int main() {
    const size_t arraySize{4}; // const : 그 값을 변경하지 않는 상수를 의미
    array<int, arraySize> a{10,20,30,40};
    int total{0};

    for(size_t i{0}; i < a.size(); i++) {
        total += a[i];
    }

    cout << "Total of array elements: " << total << endl;
}
*/

/*
#include<iostream>
using namespace std;

reference
int main() {
    int a = 5;
    int& ref = a;
    ref += 2;
    cout << a << endl;
    cout << ref << endl;
}
pointer
int main() {
  int a = 5;
  int* ptr = &a;
  *ptr += 2;
  cout << a << endl;
  cout << ptr << endl; // 메모리주소
  cout << *ptr << endl; // 포인터가 참조하고 있는 대상을 의미
}
*/

/* passing arguments to function
#include<iostream>
using namespace std;

int add1(int n) {
    return n+2;
}

void add2(int& r) {
    r += 2;
}

void add3(int *p) {
    *p += 2;
}

int main() {
    int a = 5;
    add1(a); // 값만 복사되는 것이지, 원본 a의 값을 변경할 수 없다.
    add2(a); // reference
    add3(&a); // pointer
    cout << a << endl;
}
*/

/* class - 여러 개의 멤버함수 기능을 가지고 있다.
#include<iostream>
#include<string>
using namespace std;

class Student {
private:
    int _id;
    string _name;
public:
    Student(int id, string name) {
        _id = id;
        _name = name;
    }
    string getInfor() {
        return _name + to_string(_id); //to_string : int를 string으로 변경해주는 함수
    }
};

int main() {
    Student s1{1, "pby"};
    cout << s1.getInfor() << endl;
    Student s2{2, "wook"};
    cout << s2.getInfor() << endl;
}
*/

/* class
#include<iostream>
#include<string>
using namespace std;

class Student {
private:
    string name;
    string birth;
    int score1; int score2; int score3;
    int height; double average;
public:
    Student(string n, string b, int s1, int s2, int s3, int h) {
        name = n;
        birth = b;
        score1 = s1;
        score2 = s2;
        score3 = s3;
        height = h;
    }
    void avg() {
        average = (score1 + score2 + score3) / 3.0;
    }
    void print() {
        cout << birth << " " << average << " " << height << endl;
    }
};

int main() {
    Student st1{"pby", "0212", 99, 95, 94, 158};
    Student st2{"dlwlrma", "0516", 97, 94, 97,162};
    st1.avg(); st1.print();
    st2.avg(); st2.print();
}
 */
